#Code Generated by TestGenx v.1.0
#ANCIT CONSULTING
#Date : Fri Apr 17 21:19:40 IST 2020
#Author : tejas

from __future__ import print_function
import can
import time
import cantools
from pynput import keyboard
import threading

db = cantools.db.load_file('/home/vintej/Downloads/comfort.dbc')
can_bus = can.interface.Bus(bustype='socketcan',channel='vcan0',bitrate=1000000)

LockingRemoteControlRequest=db.get_message_by_name('LockingRemoteControlRequest')
WindowControl=db.get_message_by_name('WindowControl')
CentralLockingSystemState=db.get_message_by_name('CentralLockingSystemState')

def on_Message():
    while True:
        response = can_bus.recv()
        if response.arbitration_id == LockingRemoteControlRequest:
            # Message : CASE Response : Door Unlocked on UnlockDoor Request
            example_message = db.get_message_by_name('CentralLockingSystemState')
            data = example_message.encode({'AntiTheftSystemActive':1,'LockState':0})
            message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
            try:
                can_bus.send(message)
                print(" CentralLockingSystemState Message sent on {}".format(can_bus.channel_info))
            except can.CanError:
                print("Message NOT sent")

        if response.arbitration_id == WindowControl:
            # Message : CASE Response : Window Closed with Engine Velocity 20 on Door Locked
            example_message = db.get_message_by_name('WindowState')
            data = example_message.encode({'WindowPosition':1,'WindowMotion':1})
            message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
            try:
                can_bus.send(message)
                print(" WindowState Message sent on {}".format(can_bus.channel_info))
            except can.CanError:
                print("Message NOT sent")

        if response.arbitration_id == CentralLockingSystemState:
            # Message : CASE Response : Comfort Lock Mode
            example_message = db.get_message_by_name('VehicleMotion')
            data = example_message.encode({'EngineRunning':1,'CrashDetected':0,'Velocity':0})
            message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
            try:
                can_bus.send(message)
                print(" VehicleMotion Message sent on {}".format(can_bus.channel_info))
            except can.CanError:
                print("Message NOT sent")

def on_press(key):
    print("Key Event Identified")
    try:
        if key.char == 'x': # CASE 1 : Crash Detected with EngineOn and RequestToUnlock Door
            # Message : VehicleMotion
            example_message = db.get_message_by_name('VehicleMotion')
            data = example_message.encode({'EngineRunning':1,'CrashDetected':1,'Velocity':100})
            message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
            try:
                can_bus.send(message)
                print(" VehicleMotion Message sent on {}".format(can_bus.channel_info))
            except can.CanError:
                print("Message NOT sent")

        if key.char == 'x': # CASE 1 : Crash Detected with EngineOn and RequestToUnlock Door with UnlockRequest=0x2
            # Message : LockingRemoteControlRequest
            example_message = db.get_message_by_name('LockingRemoteControlRequest')
            data = example_message.encode({'LockRequest':2})
            message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
            try:
                can_bus.send(message)
                print(" LockingRemoteControlRequest Message sent on {}".format(can_bus.channel_info))
            except can.CanError:
                print("Message NOT sent")

        if key.char == 'u': # CASE 2 : Request DoorUnLock with UnlockRequest=0x2
            # Message : LockingRemoteControlRequest
            example_message = db.get_message_by_name('LockingRemoteControlRequest')
            data = example_message.encode({'LockRequest':2})
            message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
            try:
                can_bus.send(message)
                print(" LockingRemoteControlRequest Message sent on {}".format(can_bus.channel_info))
            except can.CanError:
                print("Message NOT sent")

        if key.char == 'l': # CASE 3 : Door Locked with Engine Velocity 20 and Request to Windows Closed
            # Message : CentralLockingSystemState
            example_message = db.get_message_by_name('CentralLockingSystemState')
            data = example_message.encode({'AntiTheftSystemActive':1,'LockState':1})
            message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
            try:
                can_bus.send(message)
                print(" CentralLockingSystemState Message sent on {}".format(can_bus.channel_info))
            except can.CanError:
                print("Message NOT sent")

        if key.char == 'l': # CASE 3 : Door Locked with Engine Velocity 20 and Request to Windows Closed
            # Message : VehicleMotion
            example_message = db.get_message_by_name('VehicleMotion')
            data = example_message.encode({'EngineRunning':0,'CrashDetected':0,'Velocity':20})
            message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
            try:
                can_bus.send(message)
                print(" VehicleMotion Message sent on {}".format(can_bus.channel_info))
            except can.CanError:
                print("Message NOT sent")

        if key.char == 'l': # CASE 3 : Door Locked with Engine Velocity 20 and Request to Windows Closed
            # Message : WindowControl
            example_message = db.get_message_by_name('WindowControl')
            data = example_message.encode({'KeyDown':0,'KeyUp':1})
            message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
            try:
                can_bus.send(message)
                print(" WindowControl Message sent on {}".format(can_bus.channel_info))
            except can.CanError:
                print("Message NOT sent")

        if key.char == 'c': # CASE 4 : Comfort Lock check Window Idle
            # Message : WindowState
            example_message = db.get_message_by_name('WindowState')
            data = example_message.encode({'WindowPosition':0,'WindowMotion':0})
            message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
            try:
                can_bus.send(message)
                print(" WindowState Message sent on {}".format(can_bus.channel_info))
            except can.CanError:
                print("Message NOT sent")

        if key.char == 'c': # CASE 4 : Comfort Lock with LockRequest as 0x3
            # Message : LockingRemoteControlRequest
            example_message = db.get_message_by_name('LockingRemoteControlRequest')
            data = example_message.encode({'LockRequest':3})
            message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
            try:
                can_bus.send(message)
                print(" LockingRemoteControlRequest Message sent on {}".format(can_bus.channel_info))
            except can.CanError:
                print("Message NOT sent")

        if key.char == 'c': # CASE 4 : Comfort Lock with Door Locked State
            # Message : CentralLockingSystemState
            example_message = db.get_message_by_name('CentralLockingSystemState')
            data = example_message.encode({'AntiTheftSystemActive':1,'LockState':1})
            message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
            try:
                can_bus.send(message)
                print(" CentralLockingSystemState Message sent on {}".format(can_bus.channel_info))
            except can.CanError:
                print("Message NOT sent")
    except AttributeError:
        print(" Unknown Key Event")                     # Handling Key Exceptions


def on_Key():
    keyboard.Listener(on_press=on_press).start()

def sendMessage():
            # Message : Periodic Sample Message To Check AntitheftSystemActive as Always Active
            example_message = db.get_message_by_name('CentralLockingSystemState')
            data = example_message.encode({'AntiTheftSystemActive':1,'LockState':0})
            message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
            try:
                task = can_bus.send_periodic(message,1.0) # cycle time
                print(" CentralLockingSystemState Message sent on {}".format(can_bus.channel_info))
            except can.CanError:
                print("Message NOT sent")

if __name__ == '__main__':

    sendMessage()
    on_Key()
    threading.Thread(on_Message()).start()
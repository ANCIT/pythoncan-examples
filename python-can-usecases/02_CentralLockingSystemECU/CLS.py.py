#Code Generated by TestGenx v.1.0
#ANCIT CONSULTING
#Date : Fri Apr 17 21:19:40 IST 2020
#Author : tejas

from __future__ import print_function
import can
import time
import cantools
from pynput import keyboard
import threading

db = cantools.database.load_file('C:/Users/tejas/Documents/comfort.dbc')
can_bus = can.interface.Bus(bustype='socketcan',channel='vcan0',bitrate=1000000)

def on_Message():
	while True:
		response = can_bus.recv()
		if response.arbitration_id == LockingRemoteControlRequest:
			# Message : CentralLockingSystemState
			example_message = db.get_message_by_name('CentralLockingSystemState')
			data = example_message.encode({'AntiTheftSystemActive':0,'LockState':0})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				can_bus.send(message)
				print(" CentralLockingSystemState Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

		if response.arbitration_id == WindowControl:
			# Message : WindowState
			example_message = db.get_message_by_name('WindowState')
			data = example_message.encode({'WindowPosition':1,'WindowMotion':0})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				can_bus.send(message)
				print(" WindowState Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

		if response.arbitration_id == CentralLockingSystemState:
			# Message : VehicleMotion
			example_message = db.get_message_by_name('VehicleMotion')
			data = example_message.encode({'EngineRunning':1,'CrashDetected':0,'Velocity':0})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				can_bus.send(message)
				print(" VehicleMotion Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

def on_press(key):
print("Key Event Identified")
	if key.char == 'x': # handles if key press is x
			# Message : VehicleMotion
			example_message = db.get_message_by_name('VehicleMotion')
			data = example_message.encode({'EngineRunning':1,'CrashDetected':1,'Velocity':100})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				can_bus.send(message)
				print(" VehicleMotion Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

	if key.char == 'x': # handles if key press is x
			# Message : LockingRemoteControlRequest
			example_message = db.get_message_by_name('LockingRemoteControlRequest')
			data = example_message.encode({'LockRequest':0})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				can_bus.send(message)
				print(" LockingRemoteControlRequest Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

	if key.char == 'u': # handles if key press is u
			# Message : LockingRemoteControlRequest
			example_message = db.get_message_by_name('LockingRemoteControlRequest')
			data = example_message.encode({'LockRequest':0})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				can_bus.send(message)
				print(" LockingRemoteControlRequest Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

	if key.char == 'l': # handles if key press is l
			# Message : CentralLockingSystemState
			example_message = db.get_message_by_name('CentralLockingSystemState')
			data = example_message.encode({'AntiTheftSystemActive':0,'LockState':0})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				can_bus.send(message)
				print(" CentralLockingSystemState Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

	if key.char == 'l': # handles if key press is l
			# Message : VehicleMotion
			example_message = db.get_message_by_name('VehicleMotion')
			data = example_message.encode({'EngineRunning':0,'CrashDetected':0,'Velocity':20})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				can_bus.send(message)
				print(" VehicleMotion Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

	if key.char == 'l': # handles if key press is l
			# Message : WindowControl
			example_message = db.get_message_by_name('WindowControl')
			data = example_message.encode({'KeyDown':0,'KeyUp':1})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				can_bus.send(message)
				print(" WindowControl Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

	if key.char == 'c': # handles if key press is c
			# Message : WindowState
			example_message = db.get_message_by_name('WindowState')
			data = example_message.encode({'WindowPosition':0,'WindowMotion':0})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				can_bus.send(message)
				print(" WindowState Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

	if key.char == 'c': # handles if key press is c
			# Message : LockingRemoteControlRequest
			example_message = db.get_message_by_name('LockingRemoteControlRequest')
			data = example_message.encode({'LockRequest':0})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				can_bus.send(message)
				print(" LockingRemoteControlRequest Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

	if key.char == 'c': # handles if key press is c
			# Message : CentralLockingSystemState
			example_message = db.get_message_by_name('CentralLockingSystemState')
			data = example_message.encode({'AntiTheftSystemActive':0,'LockState':0})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				can_bus.send(message)
				print(" CentralLockingSystemState Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")


def on_Key():
	keyboard.Listener(on_press=on_press).start()

def sendMessage():
			# Message : CentralLockingSystemState
			example_message = db.get_message_by_name('CentralLockingSystemState')
			data = example_message.encode({'AntiTheftSystemActive':0,'LockState':0})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				task = can_bus.send_periodic(message,1.0) # cycle time
				print(" CentralLockingSystemState Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

if __name__ == '__main__':

	sendMessage()
	on_Key()
	threading.Thread(on_Message()).start()
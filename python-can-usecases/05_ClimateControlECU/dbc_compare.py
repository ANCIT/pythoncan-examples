#Code Generated by TestGenx v.1.0
#ANCIT CONSULTING
#Date : Fri Apr 17 11:38:21 IST 2020
#Author : arpit

from __future__ import print_function
import can
import time
import cantools
from pynput import keyboard
import threading

db = cantools.db.load_file('climate_ecu.dbc')
#can_bus = can.interface.Bus(bustype='socketcan',channel='vcan0',bitrate=1000000)
can_bus = can.interface.Bus(bustype='socketcan',channel='vcan0',bitrate=250000)

climate_simulation_MSg = db.get_message_by_name('climate_simulation_data')
climate_Control_MSg = db.get_message_by_name('climate_control_signal')

def on_Message():
	while True:
		response = can_bus.recv()
		msgData = db.decode_message(response.arbitration_id, response.data)
		if response.arbitration_id == climate_simulation_MSg.frame_id:
			carTemperature = (msgData['indoor_temp'])
			print(carTemperature)
			if (carTemperature<= 10):
				data = climate_Control_MSg.encode({'ac_status':0})
				message = can.Message(arbitration_id=climate_Control_MSg.frame_id, data=data, is_extended_id=False)
				try:
					can_bus.send(message)
					print("AC is Turned OFF")
				except can.CanError:
					print("Message NOT sent")
					
			if (carTemperature>= 20):
				data = climate_Control_MSg.encode({'ac_status':1})
				#data = climate_Control_MSg.encode({'ac_status':0})
				message = can.Message(arbitration_id=climate_Control_MSg.frame_id, data=data, is_extended_id=False)
				try:
					can_bus.send(message)
					print("AC is Turned ON")
				except can.CanError:
					print("Message NOT sent")

def on_press(key):
	print("Key Event Identified")
	try:
		if key.char == 'a': # handles if key press is a
				# Message : climate_simulation_data
				data = climate_simulation_MSg.encode({'indoor_temp':0})
				message = can.Message(arbitration_id=climate_simulation_MSg.frame_id, data=data, is_extended_id=False)
				try:
					can_bus.send(message)
					print("Set Temp : 0")
					#print(" climate_simulation_data Message sent on {}".format(can_bus.channel_info))
				except can.CanError:
					print("Message NOT sent")
		if key.char == 'b': # handles if key press is a
				# Message : climate_simulation_data
				data = climate_simulation_MSg.encode({'indoor_temp':30})
				message = can.Message(arbitration_id=climate_simulation_MSg.frame_id, data=data, is_extended_id=False)
				try:
					can_bus.send(message)
					print("Set Temp : 30")
					#print(" climate_simulation_data Message sent on {}".format(can_bus.channel_info))
				except can.CanError:
					print("Message NOT sent")
	except AttributeError:
		print(" Unknown Key Event")


def on_Key():
	keyboard.Listener(on_press=on_press).start()
	
def sendMessage():
			# Message : vehicle_simulation_data
			example_message = db.get_message_by_name('vehicle_simulation_data')
			data = example_message.encode({'engine_speed':0,'vehicle_speed':0})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				task = can_bus.send_periodic(message,4.0) # cycle time
				print("Periodic Message Started")
			except can.CanError:
				print("Message NOT sent")

if __name__ == '__main__':

	sendMessage()
	#on_Key()
	threading.Thread(on_Message()).start()

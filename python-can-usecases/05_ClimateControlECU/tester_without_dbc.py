#Code Generated by TestGenx v.1.0
#ANCIT CONSULTING
#Date : Thu Apr 16 11:15:56 IST 2020
#Author : arpit

from __future__ import print_function
import can
import time
import cantools
from pynput import keyboard
import threading

can_bus = can.interface.Bus(bustype='socketcan',channel='vcan0',bitrate=1000000)

def on_Message():
	while True:
		response = can_bus.recv()
		if response.arbitration_id == 0x09:
			# Message ID : 0x08
			message = can.Message(arbitration_id=0x08, data=[0], is_extended_id=False)
			print("AC is off",data)
			try:
				can_bus.send(message)
				print(" 0x08 Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

		if response.arbitration_id == 0x10:
			# Message ID : 0x08
			message = can.Message(arbitration_id=0x08, data=[1], is_extended_id=False)
			print("AC is ON",data)
			try:
				can_bus.send(message)
				print(" 0x08 Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

def on_press(key):
    
    print("Key Event Identified")
    
    if key.char == 'a':
        
        
            message = can.Message(arbitration_id=0x09, data=[20,0,0,0,0,0,0,0], is_extended_id=False)
            try:
                can_bus.send(message)
                print(" 0x09 Message sent on {}".format(can_bus.channel_info))
            except can.CanError:
                print("Message NOT sent")
            

    if key.char == 'b':
        
        
            message = can.Message(arbitration_id=0x10, data=[30,0,0,0,0,0,0,0], is_extended_id=False)
            try:
                can_bus.send(message)
                print(" 0x10 Message sent on {}".format(can_bus.channel_info))
            except can.CanError:
                print("Message NOT sent")

def on_Key():
	keyboard.Listener(on_press=on_press).start()

def sendMessage():
			# Message ID : 0x07
			message = can.Message(arbitration_id=0x07, data=[60,0,0,0,0,0,0,0], is_extended_id=False)
			try:
				task = can_bus.send_periodic(message,1.0) # cycle time
				print(" 0x07 Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

if __name__ == '__main__':

	sendMessage()
	on_Key()
	threading.Thread(on_Message()).start()

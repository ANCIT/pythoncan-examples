#Code Generated by TestGenx v.1.0
#ANCIT CONSULTING
#Date : Wed Apr 15 18:00:47 IST 2020
#Author : arpit

from __future__ import print_function
import can
import time
import cantools
from pynput import keyboard
import threading

db = cantools.database.load_file('D:/ancit/climate_ecu.dbc')
can_bus = can.interface.Bus(bustype='socketcan',channel='vcan0',bitrate=1000000)

def on_Message():
	while True:
		response = can_bus.recv()
		if response.arbitration_id == climate_simulation_data:
			# Message : climate_control_signal
			example_message = db.get_message_by_name('climate_control_signal')
			data = example_message.encode({'ac_status':1})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				can_bus.send(message)
				print(" climate_control_signal Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

def on_press(key):
print("Key Event Identified")
	if key.char == 'a': # handles if key press is a
			# Message : climate_simulation_data
			example_message = db.get_message_by_name('climate_simulation_data')
			data = example_message.encode({'indoor_temp':0})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				task = can_bus.send_periodic(message,1.0) # cycle time
				print(" climate_simulation_data Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")


def on_Key():
	keyboard.Listener(on_press=on_press).start()

def sendMessage():
			# Message : vehicle_simulation_data
			example_message = db.get_message_by_name('vehicle_simulation_data')
			data = example_message.encode({'engine_speed':0,'vehicle_speed':0})
			message = can.Message(arbitration_id=example_message.frame_id, data=data, is_extended_id=False)
			try:
				task = can_bus.send_periodic(message,2.0) # cycle time
				print(" vehicle_simulation_data Message sent on {}".format(can_bus.channel_info))
			except can.CanError:
				print("Message NOT sent")

if __name__ == '__main__':

	sendMessage()
	on_Key()
	threading.Thread(on_Message()).start()